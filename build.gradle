plugins {
	id 'java'
}


repositories {
	mavenLocal()
    maven {
        url = 'https://repo.runelite.net'
    }
	mavenCentral()
}

def runeLiteVersion = 'latest.release'

configurations.configureEach {
    resolutionStrategy {
        force 'com.google.code.findbugs:jsr305:3.0.2'
    }
}

dependencies {

    // For @Assisted variant injection
    // Allows offering context specific construction of injected objects
    // via a factory interface.
    // These factories are binded to the class in Guice's module config method.
    // For us, that's NaturalSpeechPlugin.java
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "com.google.guava:guava:23.2-jre"
    implementation('com.google.inject.extensions:guice-assistedinject:4.1.0') {
        exclude group: "com.google.inject", module: "guice"
    }

    // API
    compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion

    // Lombok
	compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // mock and unit testing
	testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation("com.google.inject.extensions:guice-testlib:4.1.0") {
        exclude group: "com.google.inject", module: "guice"
    }

	testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion
	testImplementation group: 'net.runelite', name:'jshell', version: runeLiteVersion


}

group = 'dev.phyce.naturalspeech'
version = '2.0.0'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.release.set(11)
    // Xlint:deprecation
//    options.compilerArgs << '-Xlint:deprecation'
}

//tasks.register('shadowJar', Jar) {
//    dependsOn configurations.testRuntimeClasspath
//    manifest {
//        attributes('Main-Class': 'dev.phyce.naturalspeech.NaturalSpeechPluginTest', 'Multi-Release': true)
//    }
//
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    from sourceSets.main.output
//    from sourceSets.test.output
//    from {
//        configurations.testRuntimeClasspath.collect { file ->
//            file.isDirectory() ? file : zipTree(file)
//        }
//    }
//
//    exclude 'META-INF/INDEX.LIST'
//    exclude 'META-INF/*.SF'
//    exclude 'META-INF/*.DSA'
//    exclude 'META-INF/*.RSA'
//    exclude '**/module-info.class'
//
//    group = BasePlugin.BUILD_GROUP
//    archiveClassifier.set('shadow')
//    archiveFileName.set("${rootProject.name}-${project.version}-all.jar")
//}